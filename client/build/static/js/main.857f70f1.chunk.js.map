{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dataFetchInterval","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","data","setData","useEffect","setInterval","getData","isEmpty","clearInterval","axios","get","then","res","console","log","d","cloneDeep","react_apexcharts_min_default","type","options","xaxis","categories","width","series","name","labels","plotOptions","pie","donut","show","value","total","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAKIA,EAAoB,ECOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cFCD,WAAM,IAAAC,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACNI,EADMJ,EAAA,GAEnBK,oBAAU,WACRlB,EAAoBmB,YAAY,WAC9BC,KACC,KACHA,KACC,IAEHF,oBAAU,WACHG,kBAAQL,IACXM,cAActB,IAEf,CAACgB,IAEJ,IAAMI,EAAU,WACdG,IACGC,IAEK,SAGLC,KAAK,SAAAC,GACJC,QAAQC,IAAI,aAAcF,EAAIV,MAC9B,IAAMa,EAAIC,oBAAUJ,EAAIV,MACxBC,EAAQY,MAId,OACErB,EAAAC,EAAAC,cAAA,WACGW,kBAAQL,GACPR,EAAAC,EAAAC,cAAA,gGAIE,KACJF,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CACEuB,KAAK,MACLC,QAAS,CACPC,MAAO,CACLC,WAAYX,cAAIR,EAAM,kBAAmB,MAG7CoB,MAAO,IACPC,OAAQ,CACN,CACEC,KAAM,WACNtB,KAAMQ,cAAIR,EAAM,gBAAiB,QAKvCR,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CACEuB,KAAK,MACLC,QAAS,CACPC,MAAO,CACLC,WAAYX,cAAIR,EAAM,gBAAiB,MAG3CoB,MAAO,IACPC,OAAQ,CAAC,CAAEC,KAAM,QAAStB,KAAMQ,cAAIR,EAAM,cAAe,QAG3DR,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CACEuB,KAAK,QACLC,QAAS,CACPM,OAAQf,cAAIR,EAAM,cAAe,IACjCwB,YAAa,CACXC,IAAK,CACHC,MAAO,CACLH,OAAQ,CACNI,MAAM,EACNL,KAAM,CACJK,MAAM,GAERC,MAAO,CACLD,MAAM,GAERE,MAAO,CACLF,MAAM,QAOlBP,MAAO,IACPC,OAAQb,cAAIR,EAAM,YAAa,QEzFvB,MAAS8B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.857f70f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { isEmpty, get, cloneDeep } from \"lodash\";\r\nimport ReactApexCharts from \"react-apexcharts\";\r\n\r\nvar dataFetchInterval = 0;\r\n\r\nexport default () => {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    dataFetchInterval = setInterval(() => {\r\n      getData();\r\n    }, 1000);\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(data)) {\r\n      clearInterval(dataFetchInterval);\r\n    }\r\n  }, [data]);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(\r\n        process.env.NODE_ENV === \"production\"\r\n          ? \"/data\"\r\n          : \"http://localhost:8000/data\"\r\n      )\r\n      .then(res => {\r\n        console.log(\"res.data: \", res.data);\r\n        const d = cloneDeep(res.data);\r\n        setData(d);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isEmpty(data) ? (\r\n        <h1>\r\n          Data no encontrada, asegurese de tener la aplicaci√≥n corriendo en\r\n          segundo plano\r\n        </h1>\r\n      ) : null}\r\n      <ReactApexCharts\r\n        type=\"bar\"\r\n        options={{\r\n          xaxis: {\r\n            categories: get(data, \"labelsProveedor\", []),\r\n          },\r\n        }}\r\n        width={700}\r\n        series={[\r\n          {\r\n            name: \"Cantidad\",\r\n            data: get(data, \"distProveedor\", []),\r\n          },\r\n        ]}\r\n      />\r\n\r\n      <ReactApexCharts\r\n        type=\"bar\"\r\n        options={{\r\n          xaxis: {\r\n            categories: get(data, \"labelsCanales\", []),\r\n          },\r\n        }}\r\n        width={700}\r\n        series={[{ name: \"Canal\", data: get(data, \"distCanales\", []) }]}\r\n      />\r\n\r\n      <ReactApexCharts\r\n        type=\"donut\"\r\n        options={{\r\n          labels: get(data, \"labelsTipos\", []),\r\n          plotOptions: {\r\n            pie: {\r\n              donut: {\r\n                labels: {\r\n                  show: true,\r\n                  name: {\r\n                    show: true,\r\n                  },\r\n                  value: {\r\n                    show: true,\r\n                  },\r\n                  total: {\r\n                    show: true,\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        }}\r\n        width={700}\r\n        series={get(data, \"distTipos\", [])}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}